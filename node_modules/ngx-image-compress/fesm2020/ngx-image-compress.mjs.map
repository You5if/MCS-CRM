{"version":3,"file":"ngx-image-compress.mjs","sources":["../../../projects/ngx-image-compress/src/lib/models/DOC_ORIENTATION.ts","../../../projects/ngx-image-compress/src/lib/image-compress.ts","../../../projects/ngx-image-compress/src/lib/ngx-image-compress.service.ts","../../../projects/ngx-image-compress/src/public-api.ts","../../../projects/ngx-image-compress/src/ngx-image-compress.ts"],"sourcesContent":["/**\n * EXIF tag standard reference\n *\n * Tag Name: Orientation\n * Tag ID: 0x0112\n * Writable: int16u\n * Group: IFD0\n * Values:\n 1 = Horizontal (normal)\n 2 = Mirror horizontal\n 3 = Rotate 180\n 4 = Mirror vertical\n 5 = Mirror horizontal and rotate 270 CW\n 6 = Rotate 90 CW\n 7 = Mirror horizontal and rotate 90 CW\n 8 = Rotate 270 CW\n */\nexport enum DOC_ORIENTATION {\n  Up = 1,                     //Horizontal (normal)\n  Down = 3,                   //Rotate 180\n  Right = 6,                  //Rotate 90 CW\n  Left = 8,                   //Rotate 270 CW\n  UpMirrored = 2,             //Mirror horizontal\n  DownMirrored = 4,           //Mirror vertical\n  LeftMirrored = 5,           //Mirror horizontal and rotate 270 CW\n  RightMirrored = 7,          //Mirror horizontal and rotate 90 CW\n  Default = 0,\n  NotJpeg = -1,\n  NotDefined = -2\n}\n\n","import { Renderer2 } from '@angular/core';\nimport { DataUrl } from './models/data-url';\nimport { DOC_ORIENTATION } from './models/DOC_ORIENTATION';\nimport { UploadResponse } from './models/upload-response';\n\nexport class ImageCompress {\n  static getOrientation = (file: File): Promise<DOC_ORIENTATION> =>\n    new Promise<DOC_ORIENTATION>((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const view = new DataView(reader.result as ArrayBuffer);\n          if (!view.byteLength) {\n            return resolve(DOC_ORIENTATION.NotDefined);\n          }\n          if (view.getUint16(0, false) !== 0xffd8) {\n            return resolve(DOC_ORIENTATION.NotDefined);\n          }\n          const length = view.byteLength;\n          let offset = 2;\n          while (offset < length) {\n            const marker = view.getUint16(offset, false);\n            offset += 2;\n            if (marker === 0xffe1) {\n              if (view.getUint32((offset += 2), false) !== 0x45786966) {\n                return resolve(DOC_ORIENTATION.NotJpeg);\n              }\n              const little = view.getUint16((offset += 6), false) === 0x4949;\n              offset += view.getUint32(offset + 4, little);\n              const tags = view.getUint16(offset, little);\n              offset += 2;\n              for (let i = 0; i < tags; i++) {\n                if (view.getUint16(offset + i * 12, little) === 0x0112) {\n                  return resolve(view.getUint16(offset + i * 12 + 8, little));\n                }\n              }\n            } else if ((marker & 0xff00) !== 0xff00) {\n              break;\n            } else {\n              offset += view.getUint16(offset, false);\n            }\n          }\n          return resolve(DOC_ORIENTATION.NotJpeg);\n        };\n        reader.readAsArrayBuffer(file);\n      } catch (e) {\n        return reject(DOC_ORIENTATION.Default);\n      }\n    });\n\n  static uploadFile = (\n    render: Renderer2,\n    multiple: boolean = true\n  ): Promise<UploadResponse | UploadResponse[]> =>\n    new Promise(function (resolve, reject) {\n      const isSafari = /^((?!chrome|android).)*safari/i.test(\n        navigator.userAgent\n      );\n\n      Promise.resolve(isSafari)\n        .then((onlyNative) => {\n          if (onlyNative) {\n            return ImageCompress.generateUploadInputNative(\n              window.document,\n              multiple\n            );\n          } else {\n            return ImageCompress.generateUploadInputRenderer(render, multiple);\n          }\n        })\n        .then((filesList: FileList | null) => {\n          const files = filesList ? Array.from(filesList) : [];\n          const orientationPromises = files.map((file) =>\n            ImageCompress.getOrientation(file)\n          );\n          const readerPromises = files.map((file) =>\n            ImageCompress.fileToDataURL(file)\n          );\n\n          let orientationsResult: DOC_ORIENTATION[] = [];\n\n          Promise.all(orientationPromises)\n            .then((orientations: DOC_ORIENTATION[]) => {\n              orientationsResult = orientations;\n              return Promise.all(readerPromises);\n            })\n            .then((readerResult) => {\n              if (multiple) {\n                const result = readerResult.map((image, index) => ({\n                  image,\n                  orientation: orientationsResult[index],\n                }));\n                resolve(result);\n              } else {\n                resolve({\n                  image: readerResult[0],\n                  orientation: orientationsResult[0],\n                });\n              }\n            });\n        });\n    });\n\n  static fileToDataURL = (file: File): Promise<string> => {\n    return new Promise<string>((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e: any) => {\n        //myReader.onloadend = (progressEvent: ProgressEvent<FileReader>)\n        resolve(e.target.result);\n      };\n      try {\n        reader.readAsDataURL(file);\n      } catch (e) {\n        reject(\n          `ngx-image-compress - probably no file have been selected: ${e}`\n        );\n      }\n    });\n  };\n\n  static generateUploadInputRenderer = (\n    render: Renderer2,\n    multiple: boolean = true\n  ) =>\n    new Promise<FileList | null>((resolve, reject) => {\n      const inputElement = render.createElement('input');\n      render.setStyle(inputElement, 'display', 'none');\n      render.setProperty(inputElement, 'type', 'file');\n      render.setProperty(inputElement, 'accept', 'image/*');\n\n      if (multiple) {\n        render.setProperty(inputElement, 'multiple', 'true');\n      }\n\n      render.listen(inputElement, 'click', ($event: MouseEvent) => {\n        ($event.target as any as HTMLInputElement).value = '';\n      });\n\n      render.listen(inputElement, 'change', ($event) => {\n        const files: FileList = $event.target.files;\n        resolve(files);\n      });\n      inputElement.click();\n    });\n\n  static generateUploadInputNative = (\n    documentNativeApi: any,\n    multiple: boolean = true\n  ) => {\n    let lock = false;\n    return new Promise<FileList | null>((resolve, reject) => {\n      const inputElement = documentNativeApi.createElement('input');\n      inputElement.id = 'upload-input' + new Date();\n      inputElement.style.display = 'none';\n      inputElement.setAttribute('type', 'file');\n\n      if (multiple) {\n        inputElement.setAttribute('multiple', 'true');\n      }\n\n      documentNativeApi.body.appendChild(inputElement);\n\n      inputElement.addEventListener(\n        'change',\n        () => {\n          lock = true;\n          resolve(inputElement.files);\n          // remove from dom\n          documentNativeApi.body.removeChild(\n            documentNativeApi.getElementById(inputElement.id) as Node\n          );\n        },\n        { once: true }\n      );\n\n      // file blur\n      window.addEventListener(\n        'focus',\n        () => {\n          setTimeout(() => {\n            if (!lock && documentNativeApi.getElementById(inputElement.id)) {\n              reject(new Error('onblur'));\n              // remove from dom\n              documentNativeApi.body.removeChild(\n                documentNativeApi.getElementById(inputElement.id) as Node\n              );\n            }\n          }, 300);\n        },\n        { once: true }\n      );\n\n      // open file select box\n      inputElement.click();\n    });\n  };\n\n  static compress = (\n    imageDataUrlSource: DataUrl,\n    orientation: DOC_ORIENTATION,\n    render: Renderer2,\n    ratio: number = 50,\n    quality: number = 50,\n    maxwidth: number = 0,\n    maxheight: number = 0\n  ): Promise<string> =>\n    new Promise(function (resolve, reject) {\n      quality = quality / 100;\n      ratio = ratio / 100;\n      const sourceImage = new Image();\n\n      // important for safari: we need to wait for onload event\n      sourceImage.onload = () => {\n        const canvas: HTMLCanvasElement = render.createElement('canvas');\n        const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\n\n        if (!ctx) {\n          return reject(`No canvas context available`);\n        }\n\n        let w = sourceImage.naturalWidth;\n        let h = sourceImage.naturalHeight;\n\n        if (!CSS.supports('image-orientation', 'from-image')) {\n          if (\n            orientation === DOC_ORIENTATION.Right ||\n            orientation === DOC_ORIENTATION.Left\n          ) {\n            const t = w;\n            w = h;\n            h = t;\n          }\n        }\n\n        let xratio = maxwidth ? maxwidth / w : 1;\n        let yratio = maxheight ? maxheight / h : 1;\n        ratio = Math.min(ratio, xratio, yratio);\n        canvas.width = w * ratio;\n        canvas.height = h * ratio;\n\n        const TO_RADIANS = Math.PI / 180;\n\n        if (\n          CSS.supports('image-orientation', 'from-image') ||\n          orientation === DOC_ORIENTATION.Up\n        ) {\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        } else if (orientation === DOC_ORIENTATION.Right) {\n          ctx.save();\n          ctx.rotate(90 * TO_RADIANS);\n          ctx.translate(0, -canvas.width);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n        } else if (orientation === DOC_ORIENTATION.Left) {\n          ctx.save();\n          ctx.rotate(-90 * TO_RADIANS);\n          ctx.translate(-canvas.width, 0);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n        } else if (orientation === DOC_ORIENTATION.Down) {\n          ctx.save();\n          ctx.rotate(180 * TO_RADIANS);\n          ctx.translate(-canvas.width, -canvas.height);\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        } else {\n          // no orientation value found - same as default UP\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        }\n\n        const mime = imageDataUrlSource.substr(\n          5,\n          imageDataUrlSource.split(';')[0].length - 5\n        );\n        // TODO test on mime\n        const result = canvas.toDataURL(mime, quality);\n\n        resolve(result);\n      };\n\n      sourceImage.onerror = (e) => reject(e);\n      sourceImage.src = imageDataUrlSource;\n    });\n\n  static byteCount = (imgString: DataUrl): number =>\n    encodeURI(imgString).split(/%..|./).length - 1;\n\n  static getImageMaxSize = async (\n    maxSizeMb: number,\n    debugMode: boolean,\n    render: Renderer2\n  ): Promise<DataUrl> => {\n    const MAX_TRIES = 10;\n\n    const bytesToMB = (bytes: number) => (bytes / 1024 / 1024).toFixed(2);\n\n    if (debugMode) {\n      console.debug('NgxImageCompress - Opening upload window');\n    }\n\n    let myFile: UploadResponse = (await ImageCompress.uploadFile(\n      render,\n      false\n    )) as UploadResponse;\n\n    let compressedFile;\n\n    for (let i = 0; i < MAX_TRIES; i++) {\n      const previousSize = ImageCompress.byteCount(myFile.image);\n      compressedFile = await ImageCompress.compress(\n        myFile.image,\n        myFile.orientation,\n        render,\n        50,\n        100\n      );\n      const newSize = ImageCompress.byteCount(compressedFile);\n      console.debug(\n        'NgxImageCompress -',\n        'Compression from',\n        bytesToMB(previousSize),\n        'MB to',\n        bytesToMB(newSize),\n        'MB'\n      );\n      if (newSize >= previousSize) {\n        if (i === 0) {\n          if (debugMode) {\n            console.debug(\n              'NgxImageCompress -',\n              \"File can't be reduced at all - returning the original\",\n              bytesToMB(previousSize),\n              'MB large'\n            );\n          }\n          throw myFile.image;\n        } else {\n          if (debugMode) {\n            console.debug(\n              'NgxImageCompress -',\n              \"File can't be reduced more - returning the best we can, which is \",\n              bytesToMB(previousSize),\n              'MB large'\n            );\n          }\n          throw myFile.image;\n        }\n      } else {\n        if (newSize < maxSizeMb * 1024 * 1024) {\n          if (debugMode) {\n            console.debug(\n              'NgxImageCompress -',\n              'Here your file',\n              bytesToMB(newSize),\n              'MB large'\n            );\n          }\n          return compressedFile;\n        } else if (i === 9) {\n          if (debugMode) {\n            console.debug(\n              'NgxImageCompress -',\n              \"File can't reach the desired size after\",\n              MAX_TRIES,\n              'tries. Returning file ',\n              bytesToMB(previousSize),\n              'MB large'\n            );\n          }\n          throw myFile.image;\n        }\n      }\n      if (debugMode) {\n        console.debug(\n          'NgxImageCompress -',\n          'Reached',\n          bytesToMB(newSize),\n          'MB large. Trying another time after',\n          i + 1,\n          'times'\n        );\n      }\n      myFile.image = compressedFile;\n    }\n    if (debugMode) {\n      console.debug('NgxImageCompress - Unexpected error');\n    }\n    throw '';\n  };\n}\n","import {Injectable, Renderer2, RendererFactory2} from '@angular/core';\nimport {ImageCompress} from './image-compress';\nimport {DOC_ORIENTATION} from './models/DOC_ORIENTATION';\nimport {UploadResponse} from './models/upload-response';\nimport {DataUrl} from './models/data-url';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxImageCompressService {\n\n  private readonly render: Renderer2;\n\n  public DOC_ORIENTATION = DOC_ORIENTATION;\n\n  constructor(rendererFactory: RendererFactory2) {\n    this.render = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * helper to evaluate the compression rate\n   * @param imgString the image in base64 string format\n   */\n  public byteCount(image: DataUrl) {\n    return ImageCompress.byteCount(image);\n  }\n\n  /**\n   * Get the correct Orientation value from image tags\n   */\n  public getOrientation(file: File): Promise<DOC_ORIENTATION> {\n    return ImageCompress.getOrientation(file);\n  }\n\n  /**\n   * return a promise with the new image data and image orientation\n   */\n  public uploadFile(): Promise<UploadResponse> {\n    return ImageCompress.uploadFile(this.render, false) as Promise<UploadResponse>;\n  }\n\n  /**\n   * return a promise with an array of image data and image orientation\n   */\n  public uploadMultipleFiles(): Promise<UploadResponse[]> {\n    return ImageCompress.uploadFile(this.render, true) as Promise<UploadResponse[]>;\n  }\n\n  /**\n   * perform a compression from the given DataUrl (string), provided by the uploadFile, or uploadMultipleFiles method\n   *\n   *\n   | Parameter   | Type   | Description                                                                       |\n   | ----------- | ------ | --------------------------------------------------------------------------------- |\n   | image       | string | DataUrl (string) representing the image                                           |\n   | orientation | number | EXIF Orientation value using the DOC_ORIENTATION enum value                       |\n   | ratio       | number | Maximum scale factor as a percentage (optional, default: 50) <sup>[1](#fn1)</sup> |\n   | quality     | number | JPEG quality factor as a percentage (optional, default: 50) <sup>[2](#fn2)</sup>  |\n   | maxwidth    | number | Maximum width in pixels if you need to resize (optional, default: 0 - no resize)  |\n   | maxheight   | number | Maximum height in pixels if you need to resize (optional, default: 0 - no resize) |\n   */\n  public compressFile(\n    image: DataUrl,\n    orientation: DOC_ORIENTATION,\n    ratio: number = 50,\n    quality: number = 50,\n    maxWidth: number = 0,\n    maxHeight: number = 0\n  ): Promise<DataUrl> {\n    return ImageCompress.compress(image, orientation, this.render, ratio, quality, maxWidth, maxHeight);\n  }\n\n  /**\n   * Most simple function to use here.\n   * Perform an upload and return an image dataUrl (string format) with a maximum size, given in *MegaBytes*\n   * If the size can't be reached, the best that can be reached will be returned in promise *rejection*\n   * Put debugMode to true if you have some trouble to print some help using console.debug\n   */\n  public uploadAndGetImageWithMaxSize(maxSizeMb: number = 1, debugMode = false): Promise<DataUrl> {\n    return ImageCompress.getImageMaxSize(maxSizeMb, debugMode, this.render);\n  }\n}\n","/*\n * Public API Surface of ngx-image-compress\n */\n\nexport * from './lib/ngx-image-compress.service';\nexport * from './lib/models/DOC_ORIENTATION';\nexport * from './lib/models/upload-response';\nexport * from './lib/models/data-url';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}